#!/usr/bin/python
#
#     Copyright 2010, Kay Hayen, mailto:kayhayen@gmx.de
#
#     Part of "Nuitka", an attempt of building an optimizing Python compiler
#     that is compatible and integrates with CPython, but also works on its
#     own.
#
#     If you submit Kay Hayen patches to this software in either form, you
#     automatically grant him a copyright assignment to the code, or in the
#     alternative a BSD license to the code, should your jurisdiction prevent
#     this. Obviously it won't affect code that comes to him indirectly or
#     code you don't submit to him.
#
#     This is to reserve my ability to re-license the code at any time, e.g.
#     the PSF. With this version of Nuitka, using it for Closed Source will
#     not be allowed.
#
#     This program is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, version 3 of the License.
#
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#     Please leave the whole of this copyright notice intact.
#

import sys, re

ran_re = re.compile( r"^(Ran \d+ tests? in )\d+\.\d+s$" )
instance_re = re.compile( r"at 0x[0-9a-f]+" )
compiled_function_re = re.compile( r"\<compiled function" )
compiled_genexpr_re = re.compile( r"\<compiled generator object \<.*?\>" )
compiled_generator_re = re.compile( r"\<compiled generator object (.*?) at" )
unbound_method_re = re.compile( r"unbound method .*?(\(\)| object)" )
compiled_type_re = re.compile( r"type 'compiled_" )
global_name_error_re = re.compile( r"global (name ')(.*?)(' is not defined)" )
module_repr_re = re.compile( r"(\<module '.*?' from ').*?('\>)" )

for line in sys.stdin:
    line = instance_re.sub( r"at 0xxxxxxxxx", line )
    line = compiled_function_re.sub( r"<function", line )
    line = compiled_genexpr_re.sub( r"<generator object <genexpr>", line )
    line = compiled_generator_re.sub( r"<generator object \1 at", line )
    line = unbound_method_re.sub( r"unbound method <xxxxx> object", line )
    line = compiled_type_re.sub( r"type '", line )
    line = global_name_error_re.sub( r"\1\2\3", line )
    line = module_repr_re.sub( r"\1xxxxx\2", line )

    line = line.replace( "must be a mapping, not compiled_function",
                         "must be a mapping, not function" )
    line = line.replace( "must be a sequence, not compiled_function",
                         "must be a sequence, not function" )

    if ran_re.match( line ):
        print ran_re.match( line ).group(1) + " x.xxxs"
    else:
        print line,
