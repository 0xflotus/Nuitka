#
#     Copyright 2011, Kay Hayen, mailto:kayhayen@gmx.de
#
#     Part of "Nuitka", an optimizing Python compiler that is compatible and
#     integrates with CPython, but also works on its own.
#
#     If you submit Kay Hayen patches to this software in either form, you
#     automatically grant him a copyright assignment to the code, or in the
#     alternative a BSD license to the code, should your jurisdiction prevent
#     this. Obviously it won't affect code that comes to him indirectly or
#     code you don't submit to him.
#
#     This is to reserve my ability to re-license the code at any time, e.g.
#     the PSF. With this version of Nuitka, using it for Closed Source will
#     not be allowed.
#
#     This program is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, version 3 of the License.
#
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#     Please leave the whole of this copyright notice intact.
#


import os, sys

# The directory with the generated C++ files to be built.
source_name = ARGUMENTS[ "name" ]
source_dir = ARGUMENTS.get( "source_dir", source_name + ".build" )

# The directory with Nuitka C++ files to be built. We tell Scons that it is a variant to
# be built, so object files don't end up inside.
nuitka_src = os.environ.get( "NUITKA_CPP", "./src/")
static_src = source_dir + "/static"

VariantDir( static_src, nuitka_src, 0 )

result_file = ARGUMENTS.get( "result_file", source_name )

env = Environment(
    # We want the outside environment to be passed through.
    ENV = os.environ,

    # The shared libraries should not be named "lib..."
    SHLIBPREFIX = "",
)

env[ "CXX" ] = "g++-nuitka"

env[ "BUILD_DIR" ] = source_dir

def getBoolOption( option_name, default ):
    value = ARGUMENTS.get( option_name, "True" if default else "False" )

    return value.lower() in ( "yes", "true", "1" )

debug_mode = getBoolOption( "debug_mode", False )
optimize_mode = getBoolOption( "optimize_mode", True )
module_mode = getBoolOption( "module_mode", False )

# All Nuitka generated C++ is C++0X standard, so make that clear.
env.Append( CCFLAGS = [ "-std=c++0x" ] )

if debug_mode:
   env.Append( CCFLAGS = [ "-Wall", "-Werror", "-Wno-sequence-point" ] )

# Use link time optimizations so that the gcc can help with optimization across
# files, but unfortunately at this time it seriously slows down the compiled
# code. This may be because it needs -O3 option to be effective.

# env.Append( CCFLAGS = [ "-flto" ] )
# env.Append( LINKFLAGS = [ "-flto" ] )

# Python version, use the scons one if not given.
python_version = ARGUMENTS.get( "python_version", None )
if python_version is None:
    python_version = "%d.%d" % ( sys.version_info[0], sys.version_info[1] )

# Python debug version or not.
python_debug = getBoolOption( "python_debug", False )
debug_indicator = "_d" if python_debug else ""

# The python header path is a combination of python version and debug
# indication, make sure the heades are found by adding it to the C++ include
# path.
python_header_path = "/usr/include/python" + python_version + debug_indicator


env.Append( CCFLAGS = [ "-I" + python_header_path ] )
env.Append( LIBS = "python" + python_version + debug_indicator )

nuitka_include = os.environ[ "NUITKA_INCLUDE" ]
env.Append( CPPPATH = [ source_dir, nuitka_include ] )

if debug_mode:
    env.Append( CCFLAGS = [ "-g", "-O2" ] )

if optimize_mode:
    env.Append( CCFLAGS = [ "-O3" ] )

    if not debug_mode:
        env.Append( CPPDEFINES = [ "__NUITKA_NO_ASSERT__" ] )

if module_mode:
    env.Append( CCFLAGS = [ "-shared", "-fPIC" ] )


if module_mode:
    env.Append( CPPDEFINES = [ "_NUITKA_MODULE" ] )
else:
    env.Append( CPPDEFINES = [ "_NUITKA_EXE" ] )


def discoverSourceFiles():
    result = []

    result.append( static_src + "/CompiledFunctionType.cpp" )
    result.append( static_src + "/CompiledGeneratorType.cpp" )
    result.append( static_src + "/CompiledGenexprType.cpp" )
    result.append( static_src + "/CompiledCodeHelpers.cpp" )

    for filename in os.listdir( source_dir ):
        if filename.endswith( ".cpp" ):
            result.append( source_dir + "/" + filename )


    return result

if module_mode:
    target = env.SharedLibrary( result_file + ".so", discoverSourceFiles() )
else:
    target = env.Program( result_file + ".exe", discoverSourceFiles() )

Default( target )
